const fs = require(`fs`)
const path = require(`path`)

const split_rss = require(`./split-rss.js`)

const title_to_rss_name = {
	'The Pugcast': `theologypugcast`,
	'AD on FLF Network': `adrobles`,
	'The Patriarchy Podcast': `patriachy`,
	'Daily News Brief': `dailynews`,
	'The Doane Cast': `darrendoane`,
}

const fetch2 = (...args) => {
	return fetch(...args)
		.then(r => {
			if (!r.ok) {
				throw new Error(r.status)
			}
			return r.text()
		})
}

const resolve = filename => path.join(__dirname, filename)
const read_file = filename => fs.readFileSync(resolve(filename), { encoding: `utf-8` })
const write_file = (filename, text) => fs.writeFileSync(resolve(filename), text, { encoding: `utf-8` })

const get_rss_url = rss_name => `https://artskydj.github.io/crosspolitic-split-feeds/rss/${ rss_name }`

const main = async() => {
	const body = await fetch2(`https://crosspolitic.com/feed/podcast`)
	write_file(`../tmp/crosspolitic.rss`, body)
	// const body = read_file(`../tmp/crosspolitic.rss`)

	const { begin_channel, items, end_channel } = split_rss(body)

	const bins = {}

	items.forEach(rss_item => {
		const title = rss_item.match(/<title>(?:<!\[CDATA\[)?.+\[(.+?)\](?:\]\]>)?<\/title>/)?.[1]
		const rss_name = (
			title
				? title_to_rss_name[title] || title.replaceAll(/\W+/g, '_').toLowerCase()
				: `everythingelse`
		) + `.rss`

		if (!bins[rss_name]) {
			bins[rss_name] = {
				title,
				items: []
			}
		}
		bins[rss_name].items.push(rss_item)
	})

	Object.entries(bins).forEach(([ rss_name, { title, items }]) => {
		const new_begin_channel = begin_channel
			.replace(/<title>.+?<\/title>/, `<title>FLF - ${ title }</title>`)
			.replace(/<atom:link href=".+?"/, `<atom:link href="${ get_rss_url(rss_name) }"`)
		const new_feed = [ new_begin_channel, ...items, end_channel ].join(``)
		write_file(`../rss/${ rss_name }`, new_feed)
	})

	const markdown_list = Object.entries(bins)
		.sort((a, b) => a[1].title > b[1].title ? 1 : a[1].title < b[1].title ? -1 : 0)
		.map(([ rss_name, { title, items }]) => `- [${ title }](${ get_rss_url(rss_name) }) (${ items.length } episodes)`)
		.join(`\n`)
	const current_readme = read_file(`../README.md`)
	const new_readme = current_readme
		.replace(
			/<!-- autogenerated below -->[\s\S]*?<!-- autogenerated above -->/,
			`<!-- autogenerated below -->\n${ markdown_list }\n<!-- autogenerated above -->`
		)
	write_file(`../README.md`, new_readme)
}

main()
